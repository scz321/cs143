# start of generated code
	.data
	.align	2
	.globl	class_nameTab
	.globl	Main_protObj
	.globl	Int_protObj
	.globl	String_protObj
	.globl	bool_const0
	.globl	bool_const1
	.globl	_int_tag
	.globl	_bool_tag
	.globl	_string_tag
_int_tag:
	.word	2
_bool_tag:
	.word	3
_string_tag:
	.word	4
	.globl	_MemMgr_INITIALIZER
_MemMgr_INITIALIZER:
	.word	_GenGC_Init
	.globl	_MemMgr_COLLECTOR
_MemMgr_COLLECTOR:
	.word	_GenGC_Collect
	.globl	_MemMgr_TEST
_MemMgr_TEST:
	.word	0
	.word	-1
str_const75:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const1
	.byte	0	
	.align	2
	.word	-1
str_const74:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Main"
	.byte	0	
	.align	2
	.word	-1
str_const73:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Term"
	.byte	0	
	.align	2
	.word	-1
str_const72:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"App"
	.byte	0	
	.align	2
	.word	-1
str_const71:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Lambda"
	.byte	0	
	.align	2
	.word	-1
str_const70:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const5
	.ascii	"Variable"
	.byte	0	
	.align	2
	.word	-1
str_const69:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Expr"
	.byte	0	
	.align	2
	.word	-1
str_const68:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"LambdaListRef"
	.byte	0	
	.align	2
	.word	-1
str_const67:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"LambdaListNE"
	.byte	0	
	.align	2
	.word	-1
str_const66:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"LambdaList"
	.byte	0	
	.align	2
	.word	-1
str_const65:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"VarListNE"
	.byte	0	
	.align	2
	.word	-1
str_const64:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"VarList"
	.byte	0	
	.align	2
	.word	-1
str_const63:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"String"
	.byte	0	
	.align	2
	.word	-1
str_const62:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Bool"
	.byte	0	
	.align	2
	.word	-1
str_const61:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"Int"
	.byte	0	
	.align	2
	.word	-1
str_const60:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"IO"
	.byte	0	
	.align	2
	.word	-1
str_const59:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Object"
	.byte	0	
	.align	2
	.word	-1
str_const58:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"_prim_slot"
	.byte	0	
	.align	2
	.word	-1
str_const57:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"SELF_TYPE"
	.byte	0	
	.align	2
	.word	-1
str_const56:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"_no_class"
	.byte	0	
	.align	2
	.word	-1
str_const55:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"<basic class>"
	.byte	0	
	.align	2
	.word	-1
str_const54:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"\n};\n};\n"
	.byte	0	
	.align	2
	.word	-1
str_const53:
	.word	4
	.word	11
	.word	String_dispTab
	.word	int_const12
	.ascii	"  main() : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const52:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Main {\n"
	.byte	0	
	.align	2
	.word	-1
str_const51:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const13
	.ascii	"(*Generated by lam.cl (Jeff Foster, March 2000)*)\n"
	.byte	0	
	.align	2
	.word	-1
str_const50:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"\n------------------cut here------------------\n"
	.byte	0	
	.align	2
	.word	-1
str_const49:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"Generating code for "
	.byte	0	
	.align	2
	.word	-1
str_const48:
	.word	4
	.word	20
	.word	String_dispTab
	.word	int_const16
	.ascii	"  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const47:
	.word	4
	.word	19
	.word	String_dispTab
	.word	int_const17
	.ascii	"  init(p : Closure) : Closure {{ parent <- p; self; }};\n"
	.byte	0	
	.align	2
	.word	-1
str_const46:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const18
	.ascii	"  get_x() : EvalObject { x };\n"
	.byte	0	
	.align	2
	.word	-1
str_const45:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const19
	.ascii	"  get_parent() : Closure { parent };\n"
	.byte	0	
	.align	2
	.word	-1
str_const44:
	.word	4
	.word	9
	.word	String_dispTab
	.word	int_const20
	.ascii	"  x : EvalObject;\n"
	.byte	0	
	.align	2
	.word	-1
str_const43:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"  parent : Closure;\n"
	.byte	0	
	.align	2
	.word	-1
str_const42:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const21
	.ascii	"class Closure inherits EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const41:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"  eval() : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const40:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"class EvalObject inherits IO {\n"
	.byte	0	
	.align	2
	.word	-1
str_const39:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" =>\n"
	.byte	0	
	.align	2
	.word	-1
str_const38:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"beta-reduce: "
	.byte	0	
	.align	2
	.word	-1
str_const37:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"z"
	.byte	0	
	.align	2
	.word	-1
str_const36:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"y"
	.byte	0	
	.align	2
	.word	-1
str_const35:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"x"
	.byte	0	
	.align	2
	.word	-1
str_const34:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"  esac)"
	.byte	0	
	.align	2
	.word	-1
str_const33:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"    o : Object => { abort(); new EvalObject; };\n"
	.byte	0	
	.align	2
	.word	-1
str_const32:
	.word	4
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"    c : Closure => c.apply(y);\n"
	.byte	0	
	.align	2
	.word	-1
str_const31:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"  case x of\n"
	.byte	0	
	.align	2
	.word	-1
str_const30:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" in\n"
	.byte	0	
	.align	2
	.word	-1
str_const29:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"     y : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const28:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	",\n"
	.byte	0	
	.align	2
	.word	-1
str_const27:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"(let x : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const26:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"))"
	.byte	0	
	.align	2
	.word	-1
str_const25:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	")@("
	.byte	0	
	.align	2
	.word	-1
str_const24:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"(("
	.byte	0	
	.align	2
	.word	-1
str_const23:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"};\n"
	.byte	0	
	.align	2
	.word	-1
str_const22:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const25
	.ascii	";}};\n"
	.byte	0	
	.align	2
	.word	-1
str_const21:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const26
	.ascii	"      x <- y;\n"
	.byte	0	
	.align	2
	.word	-1
str_const20:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.byte	92
	.ascii	"n\");\n"
	.byte	0	
	.align	2
	.word	-1
str_const19:
	.word	4
	.word	13
	.word	String_dispTab
	.word	int_const27
	.ascii	"    { out_string(\"Applying closure "
	.byte	0	
	.align	2
	.word	-1
str_const18:
	.word	4
	.word	14
	.word	String_dispTab
	.word	int_const28
	.ascii	"  apply(y : EvalObject) : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const17:
	.word	4
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	" inherits Closure {\n"
	.byte	0	
	.align	2
	.word	-1
str_const16:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Closure"
	.byte	0	
	.align	2
	.word	-1
str_const15:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"self))"
	.byte	0	
	.align	2
	.word	-1
str_const14:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"new Closure))"
	.byte	0	
	.align	2
	.word	-1
str_const13:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	").init("
	.byte	0	
	.align	2
	.word	-1
str_const12:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"((new Closure"
	.byte	0	
	.align	2
	.word	-1
str_const11:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"."
	.byte	0	
	.align	2
	.word	-1
str_const10:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.byte	92
	.byte	0	
	.align	2
	.word	-1
str_const9:
	.word	4
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"get_x()"
	.byte	0	
	.align	2
	.word	-1
str_const8:
	.word	4
	.word	11
	.word	String_dispTab
	.word	int_const29
	.ascii	"Error:  free occurrence of "
	.byte	0	
	.align	2
	.word	-1
str_const7:
	.word	4
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"get_parent()."
	.byte	0	
	.align	2
	.word	-1
str_const6:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const30
	.ascii	"\nError: Expr is pure virtual; can't gen_code\n"
	.byte	0	
	.align	2
	.word	-1
str_const5:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't substitute\n"
	.byte	0	
	.align	2
	.word	-1
str_const4:
	.word	4
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"\nError: Expr is pure virtual; can't beta-reduce\n"
	.byte	0	
	.align	2
	.word	-1
str_const3:
	.word	4
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't print self\n"
	.byte	0	
	.align	2
	.word	-1
str_const2:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	" "
	.byte	0	
	.align	2
	.word	-1
str_const1:
	.word	4
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"\n"
	.byte	0	
	.align	2
	.word	-1
str_const0:
	.word	4
	.word	7
	.word	String_dispTab
	.word	int_const32
	.ascii	"./lam-gc.cl"
	.byte	0	
	.align	2
	.word	-1
int_const32:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	11
	.word	-1
int_const31:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	47
	.word	-1
int_const30:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	45
	.word	-1
int_const29:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	27
	.word	-1
int_const28:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	39
	.word	-1
int_const27:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	35
	.word	-1
int_const26:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	14
	.word	-1
int_const25:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	5
	.word	-1
int_const24:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	23
	.word	-1
int_const23:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	48
	.word	-1
int_const22:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	31
	.word	-1
int_const21:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	36
	.word	-1
int_const20:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	18
	.word	-1
int_const19:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	37
	.word	-1
int_const18:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	30
	.word	-1
int_const17:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	56
	.word	-1
int_const16:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	61
	.word	-1
int_const15:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	20
	.word	-1
int_const14:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	46
	.word	-1
int_const13:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	50
	.word	-1
int_const12:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	24
	.word	-1
int_const11:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	2
	.word	-1
int_const10:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	7
	.word	-1
int_const9:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	9
	.word	-1
int_const8:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	10
	.word	-1
int_const7:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	12
	.word	-1
int_const6:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	13
	.word	-1
int_const5:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	8
	.word	-1
int_const4:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	6
	.word	-1
int_const3:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	3
	.word	-1
int_const2:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	4
	.word	-1
int_const1:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
int_const0:
	.word	2
	.word	4
	.word	Int_dispTab
	.word	1
	.word	-1
bool_const0:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	0
	.word	-1
bool_const1:
	.word	3
	.word	4
	.word	Bool_dispTab
	.word	1
class_nameTab:
	.word	str_const59
# child: IO
# child: Int
# child: Bool
# child: String
# child: LambdaList
# child: LambdaListRef

	.word	str_const60
# child: VarList
# child: Expr
# child: Term

	.word	str_const61

	.word	str_const62

	.word	str_const63

	.word	str_const64
# child: VarListNE

	.word	str_const65

	.word	str_const66
# child: LambdaListNE

	.word	str_const67

	.word	str_const68

	.word	str_const69
# child: Variable
# child: Lambda
# child: App

	.word	str_const70

	.word	str_const71

	.word	str_const72

	.word	str_const73
# child: Main

	.word	str_const74

class_objTab:
	.word	Object_protObj
	.word	Object_init
	.word	IO_protObj
	.word	IO_init
	.word	Int_protObj
	.word	Int_init
	.word	Bool_protObj
	.word	Bool_init
	.word	String_protObj
	.word	String_init
	.word	VarList_protObj
	.word	VarList_init
	.word	VarListNE_protObj
	.word	VarListNE_init
	.word	LambdaList_protObj
	.word	LambdaList_init
	.word	LambdaListNE_protObj
	.word	LambdaListNE_init
	.word	LambdaListRef_protObj
	.word	LambdaListRef_init
	.word	Expr_protObj
	.word	Expr_init
	.word	Variable_protObj
	.word	Variable_init
	.word	Lambda_protObj
	.word	Lambda_init
	.word	App_protObj
	.word	App_init
	.word	Term_protObj
	.word	Term_init
	.word	Main_protObj
	.word	Main_init
Object_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
IO_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	IO.out_string
	# method # 4
	.word	IO.out_int
	# method # 5
	.word	IO.in_string
	# method # 6
	.word	IO.in_int
Int_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
Bool_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
String_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	String.length
	# method # 4
	.word	String.concat
	# method # 5
	.word	String.substr
VarList_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	IO.out_string
	# method # 4
	.word	IO.out_int
	# method # 5
	.word	IO.in_string
	# method # 6
	.word	IO.in_int
	# method # 7
	.word	VarList.isNil
	# method # 8
	.word	VarList.head
	# method # 9
	.word	VarList.tail
	# method # 10
	.word	VarList.add
	# method # 11
	.word	VarList.print
VarListNE_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	IO.out_string
	# method # 4
	.word	IO.out_int
	# method # 5
	.word	IO.in_string
	# method # 6
	.word	IO.in_int
	# method # 7
	.word	VarListNE.isNil
	# method # 8
	.word	VarListNE.head
	# method # 9
	.word	VarListNE.tail
	# method # 10
	.word	VarList.add
	# method # 11
	.word	VarListNE.print
	# method # 12
	.word	VarListNE.init
LambdaList_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	LambdaList.isNil
	# method # 4
	.word	LambdaList.headE
	# method # 5
	.word	LambdaList.headC
	# method # 6
	.word	LambdaList.headN
	# method # 7
	.word	LambdaList.tail
	# method # 8
	.word	LambdaList.add
LambdaListNE_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	LambdaListNE.isNil
	# method # 4
	.word	LambdaListNE.headE
	# method # 5
	.word	LambdaListNE.headC
	# method # 6
	.word	LambdaListNE.headN
	# method # 7
	.word	LambdaListNE.tail
	# method # 8
	.word	LambdaList.add
	# method # 9
	.word	LambdaListNE.init
LambdaListRef_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	LambdaListRef.isNil
	# method # 4
	.word	LambdaListRef.headE
	# method # 5
	.word	LambdaListRef.headC
	# method # 6
	.word	LambdaListRef.headN
	# method # 7
	.word	LambdaListRef.reset
	# method # 8
	.word	LambdaListRef.add
	# method # 9
	.word	LambdaListRef.removeHead
Expr_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	IO.out_string
	# method # 4
	.word	IO.out_int
	# method # 5
	.word	IO.in_string
	# method # 6
	.word	IO.in_int
	# method # 7
	.word	Expr.print_self
	# method # 8
	.word	Expr.beta
	# method # 9
	.word	Expr.substitute
	# method # 10
	.word	Expr.gen_code
Variable_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	IO.out_string
	# method # 4
	.word	IO.out_int
	# method # 5
	.word	IO.in_string
	# method # 6
	.word	IO.in_int
	# method # 7
	.word	Variable.print_self
	# method # 8
	.word	Variable.beta
	# method # 9
	.word	Variable.substitute
	# method # 10
	.word	Variable.gen_code
	# method # 11
	.word	Variable.init
Lambda_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	IO.out_string
	# method # 4
	.word	IO.out_int
	# method # 5
	.word	IO.in_string
	# method # 6
	.word	IO.in_int
	# method # 7
	.word	Lambda.print_self
	# method # 8
	.word	Lambda.beta
	# method # 9
	.word	Lambda.substitute
	# method # 10
	.word	Lambda.gen_code
	# method # 11
	.word	Lambda.init
	# method # 12
	.word	Lambda.apply
	# method # 13
	.word	Lambda.gen_closure_code
App_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	IO.out_string
	# method # 4
	.word	IO.out_int
	# method # 5
	.word	IO.in_string
	# method # 6
	.word	IO.in_int
	# method # 7
	.word	App.print_self
	# method # 8
	.word	App.beta
	# method # 9
	.word	App.substitute
	# method # 10
	.word	App.gen_code
	# method # 11
	.word	App.init
Term_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	IO.out_string
	# method # 4
	.word	IO.out_int
	# method # 5
	.word	IO.in_string
	# method # 6
	.word	IO.in_int
	# method # 7
	.word	Term.var
	# method # 8
	.word	Term.lam
	# method # 9
	.word	Term.app
	# method # 10
	.word	Term.i
	# method # 11
	.word	Term.k
	# method # 12
	.word	Term.s
Main_dispTab:
	# method # 0
	.word	Object.abort
	# method # 1
	.word	Object.type_name
	# method # 2
	.word	Object.copy
	# method # 3
	.word	IO.out_string
	# method # 4
	.word	IO.out_int
	# method # 5
	.word	IO.in_string
	# method # 6
	.word	IO.in_int
	# method # 7
	.word	Term.var
	# method # 8
	.word	Term.lam
	# method # 9
	.word	Term.app
	# method # 10
	.word	Term.i
	# method # 11
	.word	Term.k
	# method # 12
	.word	Term.s
	# method # 13
	.word	Main.beta_reduce
	# method # 14
	.word	Main.eval_class
	# method # 15
	.word	Main.closure_class
	# method # 16
	.word	Main.gen_code
	# method # 17
	.word	Main.main
	.word	-1
Object_protObj:
	.word	0	# class tag
	.word	3	# size
	.word	Object_dispTab
	.word	-1
IO_protObj:
	.word	1	# class tag
	.word	3	# size
	.word	IO_dispTab
	.word	-1
Int_protObj:
	.word	2	# class tag
	.word	4	# size
	.word	Int_dispTab
	.word	0	# val(0)
	.word	-1
Bool_protObj:
	.word	3	# class tag
	.word	4	# size
	.word	Bool_dispTab
	.word	0	# val(0)
	.word	-1
String_protObj:
	.word	4	# class tag
	.word	5	# size
	.word	String_dispTab
	.word	int_const1	# int(0)
	.word	0	# str(0)
	.word	-1
VarList_protObj:
	.word	5	# class tag
	.word	3	# size
	.word	VarList_dispTab
	.word	-1
VarListNE_protObj:
	.word	6	# class tag
	.word	5	# size
	.word	VarListNE_dispTab
	.word	0	# void
	.word	0	# void
	.word	-1
LambdaList_protObj:
	.word	7	# class tag
	.word	3	# size
	.word	LambdaList_dispTab
	.word	-1
LambdaListNE_protObj:
	.word	8	# class tag
	.word	7	# size
	.word	LambdaListNE_dispTab
	.word	0	# void
	.word	int_const1	# int(0)
	.word	0	# void
	.word	0	# void
	.word	-1
LambdaListRef_protObj:
	.word	9	# class tag
	.word	5	# size
	.word	LambdaListRef_dispTab
	.word	int_const1	# int(0)
	.word	0	# void
	.word	-1
Expr_protObj:
	.word	10	# class tag
	.word	3	# size
	.word	Expr_dispTab
	.word	-1
Variable_protObj:
	.word	11	# class tag
	.word	4	# size
	.word	Variable_dispTab
	.word	str_const75	# str()
	.word	-1
Lambda_protObj:
	.word	12	# class tag
	.word	5	# size
	.word	Lambda_dispTab
	.word	0	# void
	.word	0	# void
	.word	-1
App_protObj:
	.word	13	# class tag
	.word	5	# size
	.word	App_dispTab
	.word	0	# void
	.word	0	# void
	.word	-1
Term_protObj:
	.word	14	# class tag
	.word	3	# size
	.word	Term_dispTab
	.word	-1
Main_protObj:
	.word	15	# class tag
	.word	3	# size
	.word	Main_dispTab
	.globl	heap_start
heap_start:
	.word	0
	.text
	.globl	Main_init
	.globl	Int_init
	.globl	String_init
	.globl	Bool_init
	.globl	Main.main
Object_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

IO_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Object_init

	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

Int_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Object_init

	# init attrib _val
	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

Bool_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Object_init

	# init attrib _val
	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

String_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Object_init

	# init attrib _val
	la	$a0 int_const1
	sw	$a0 12($s0)
	# init attrib _str_field
	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

VarList_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	IO_init

	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

VarListNE_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	VarList_init

	# init attrib x
	# init attrib rest
	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

LambdaList_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Object_init

	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

LambdaListNE_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	LambdaList_init

	# init attrib lam
	# init attrib num
	la	$a0 int_const1
	sw	$a0 16($s0)
	# init attrib env
	# init attrib rest
	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

LambdaListRef_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Object_init

	# init attrib nextNum
	la	$a0 int_const1
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	# init attrib l
	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

Expr_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	IO_init

	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

Variable_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Expr_init

	# init attrib name
	la	$a0 str_const75
	sw	$a0 12($s0)
	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

Lambda_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Expr_init

	# init attrib arg
	# init attrib body
	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

App_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Expr_init

	# init attrib fun
	# init attrib arg
	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

Term_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	IO_init

	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

Main_init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# init parent
	jal	Term_init

	# ret = SELF
	move	$a0 $s0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# return
	jr	$ra	

VarList.isNil:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	la	$a0 bool_const1

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

VarList.head:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label0
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label0:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	la	$a0 Variable_protObj
	jal	Object.copy
	jal	Variable_init

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

VarList.tail:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label1
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label1:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	la	$a0 VarList_protObj
	jal	Object.copy
	jal	VarList_init

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

VarList.add:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is self.
	move	$a0 $s0

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	la	$a0 VarListNE_protObj
	jal	Object.copy
	jal	VarListNE_init
	# if obj = void: abort
	bne	$a0 $zero label2
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label2:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto init
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 4

	# return
	jr	$ra	

VarList.print:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label3
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label3:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

VarListNE.isNil:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	la	$a0 bool_const0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

VarListNE.head:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

VarListNE.tail:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

VarListNE.init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

VarListNE.print:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label4
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label4:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const2
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label5
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label5:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label6
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label6:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto print
	jalr		$t1

	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaList.isNil:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	la	$a0 bool_const1

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaList.headE:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label7
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label7:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	la	$a0 VarList_protObj
	jal	Object.copy
	jal	VarList_init

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaList.headC:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label8
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label8:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	la	$a0 Lambda_protObj
	jal	Object.copy
	jal	Lambda_init

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaList.headN:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label9
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label9:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	la	$a0 int_const1

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaList.tail:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label10
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label10:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	la	$a0 LambdaList_protObj
	jal	Object.copy
	jal	LambdaList_init

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaList.add:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 20($fp)
	addiu	$a1 $fp 20
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is self.
	move	$a0 $s0

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	la	$a0 LambdaListNE_protObj
	jal	Object.copy
	jal	LambdaListNE_init
	# if obj = void: abort
	bne	$a0 $zero label11
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label11:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto init
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 12

	# return
	jr	$ra	

LambdaListNE.isNil:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	la	$a0 bool_const0

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListNE.headE:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Object:
	# It is an attribute.
	lw	$a0 20($s0)
	addiu	$a1 $s0 20
	jal	_GenGC_Assign


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListNE.headC:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListNE.headN:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListNE.tail:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Object:
	# It is an attribute.
	lw	$a0 24($s0)
	addiu	$a1 $s0 24
	jal	_GenGC_Assign


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListNE.init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 24($fp)
	addiu	$a1 $fp 24
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 20($s0)
	addiu	$a1 $s0 20
	jal	_GenGC_Assign
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 20($fp)
	addiu	$a1 $fp 20
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 24($s0)
	addiu	$a1 $s0 24
	jal	_GenGC_Assign
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 16

	# return
	jr	$ra	

LambdaListRef.isNil:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label12
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label12:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto isNil
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListRef.headE:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label13
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label13:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 16($t1)

	# jumpto headE
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListRef.headC:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label14
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label14:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 20($t1)

	# jumpto headC
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListRef.headN:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label15
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label15:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 24($t1)

	# jumpto headN
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListRef.reset:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Assign. First eval the expr.
	la	$a0 int_const1
	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
	# Assign. First eval the expr.
	la	$a0 LambdaList_protObj
	jal	Object.copy
	jal	LambdaList_init
	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

LambdaListRef.add:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Assign. First eval the expr.
	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label16
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label16:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto add
	jalr		$t1

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	# Assign. First eval the expr.
	# Int operation : Add
	# First eval e1 and push.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Then eval e2 and make a copy for result.
	la	$a0 int_const0
	jal	Object.copy

	# Let's pop e1 to t1, move e2 to t2
	addiu	$sp $sp 4
	lw	$t1 0($sp)
	move	$t2 $a0

	# Extract the int inside the object.
	lw	$t1 12($t1)
	lw	$t2 12($t2)

	# Modify the int inside t2.
	add	$t3 $t1 $t2
	sw	$t3 12($a0)

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
	# Int operation : Sub
	# First eval e1 and push.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Then eval e2 and make a copy for result.
	la	$a0 int_const0
	jal	Object.copy

	# Let's pop e1 to t1, move e2 to t2
	addiu	$sp $sp 4
	lw	$t1 0($sp)
	move	$t2 $a0

	# Extract the int inside the object.
	lw	$t1 12($t1)
	lw	$t2 12($t2)

	# Modify the int inside t2.
	sub	$t3 $t1 $t2
	sw	$t3 12($a0)


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

LambdaListRef.removeHead:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Assign. First eval the expr.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label17
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label17:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto tail
	jalr		$t1

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Expr.print_self:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const3
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label18
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label18:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label19
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label19:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Expr.beta:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const4
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label20
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label20:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label21
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label21:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Expr.substitute:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const5
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label22
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label22:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label23
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label23:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Expr.gen_code:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const6
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label24
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label24:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label25
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label25:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Variable.init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 4

	# return
	jr	$ra	

Variable.print_self:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label26
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label26:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Variable.beta:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Variable.substitute:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# If statement. First eval condition.
	# equal
	# First eval e1 and push.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Then eval e2.
	# Object:
	# It is self.
	move	$a0 $s0


	# Let's pop e1 to t1, move e2 to t2
	addiu	$sp $sp 4
	lw	$t1 0($sp)
	move	$t2 $a0

	# Pretend that t1 = t2
	la	$a0 bool_const1
	# Compare the two pointers.
	beq	$t1 $t2 label27
	la	$a0 bool_const0
label27:
	# extract the bool content from acc to t1
	lw	$t1 12($a0)

	# if t1 == 0 goto false
	beq	$t1 $zero label28

	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# jumpt finish
	b	label29

# False:
label28:
	# Object:
	# It is self.
	move	$a0 $s0

# Finish:
label29:

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Variable.gen_code:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Let expr
	# First eval init
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# While loop
	# start:
label30:
	# ACC = pred
	# If statement. First eval condition.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label32
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label32:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto isNil
	jalr		$t1

	# extract the bool content from acc to t1
	lw	$t1 12($a0)

	# if t1 == 0 goto false
	beq	$t1 $zero label33

	la	$a0 bool_const0
	# jumpt finish
	b	label34

# False:
label33:
	# the 'not' operator
	# First eval the bool
	# equal
	# First eval e1 and push.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label35
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label35:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto head
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Then eval e2.
	# Object:
	# It is self.
	move	$a0 $s0


	# Let's pop e1 to t1, move e2 to t2
	addiu	$sp $sp 4
	lw	$t1 0($sp)
	move	$t2 $a0

	# Pretend that t1 = t2
	la	$a0 bool_const1
	# Compare the two pointers.
	beq	$t1 $t2 label36
	la	$a0 bool_const0
label36:
	# Extract the int inside the bool
	lw	$t1 12($a0)
	# Pretend ACC = false, then we need to construct true
	la	$a0 bool_const1
	# If ACC = false, jumpto finish
	beq	$t1 $zero label37
	# Load false
	la	$a0 bool_const0
	# finish:
label37:
# Finish:
label34:
	# extract int inside bool
	lw	$t1 12($a0)

	# if pred == false jumpto finish
	beq	$t1 $zero label31

	# Dispatch. First eval and save the params.
	la	$a0 str_const7
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label38
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label38:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Assign. First eval the expr.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label39
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label39:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto tail
	jalr		$t1

	# Now find the lvalue.
	# It is a let variable.
	sw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign
	# Jumpto start
	b	label30
	# Finish:
label31:
	# ACC = void
	move	$a0 $zero
	# If statement. First eval condition.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label40
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label40:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto isNil
	jalr		$t1

	# extract the bool content from acc to t1
	lw	$t1 12($a0)

	# if t1 == 0 goto false
	beq	$t1 $zero label41

	# Dispatch. First eval and save the params.
	la	$a0 str_const8
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label43
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label43:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label44
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label44:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label45
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label45:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label46
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label46:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 0($t1)

	# jumpto abort
	jalr		$t1

	# Object:
	# It is self.
	move	$a0 $s0

	# jumpt finish
	b	label42

# False:
label41:
	# Dispatch. First eval and save the params.
	la	$a0 str_const9
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label47
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label47:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

# Finish:
label42:
	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Lambda.init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Lambda.print_self:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const10
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label48
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label48:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label49
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label49:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const11
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label50
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label50:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label51
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label51:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Lambda.beta:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Lambda.apply:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label52
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label52:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto substitute
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 4

	# return
	jr	$ra	

Lambda.substitute:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# If statement. First eval condition.
	# equal
	# First eval e1 and push.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Then eval e2.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign


	# Let's pop e1 to t1, move e2 to t2
	addiu	$sp $sp 4
	lw	$t1 0($sp)
	move	$t2 $a0

	# Pretend that t1 = t2
	la	$a0 bool_const1
	# Compare the two pointers.
	beq	$t1 $t2 label53
	la	$a0 bool_const0
label53:
	# extract the bool content from acc to t1
	lw	$t1 12($a0)

	# if t1 == 0 goto false
	beq	$t1 $zero label54

	# Object:
	# It is self.
	move	$a0 $s0

	# jumpt finish
	b	label55

# False:
label54:
	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label56
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label56:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto substitute
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	la	$a0 Lambda_protObj
	jal	Object.copy
	jal	Lambda_init
	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label57
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label57:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto init
	jalr		$t1

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4

# Finish:
label55:

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Lambda.gen_code:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const12
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label58
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label58:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is self.
	move	$a0 $s0

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label59
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label59:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto add
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label60
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label60:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 16($t1)

	# jumpto out_int
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const13
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label61
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label61:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# If statement. First eval condition.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label62
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label62:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto isNil
	jalr		$t1

	# extract the bool content from acc to t1
	lw	$t1 12($a0)

	# if t1 == 0 goto false
	beq	$t1 $zero label63

	# Dispatch. First eval and save the params.
	la	$a0 str_const14
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label65
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label65:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# jumpt finish
	b	label64

# False:
label63:
	# Dispatch. First eval and save the params.
	la	$a0 str_const15
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label66
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label66:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

# Finish:
label64:
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Lambda.gen_closure_code:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const16
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label67
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label67:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 20($fp)
	addiu	$a1 $fp 20
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label68
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label68:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 16($t1)

	# jumpto out_int
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const17
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label69
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label69:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const18
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label70
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label70:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const19
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label71
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label71:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 20($fp)
	addiu	$a1 $fp 20
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label72
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label72:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 16($t1)

	# jumpto out_int
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const20
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label73
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label73:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const21
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label74
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label74:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label75
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label75:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto add
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label76
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label76:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto gen_code
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const22
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label77
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label77:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const23
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label78
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label78:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 12

	# return
	jr	$ra	

App.init:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign
	# Assign. First eval the expr.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is an attribute.
	sw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign
	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

App.print_self:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const24
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label79
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label79:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label80
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label80:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const25
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label81
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label81:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label82
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label82:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const26
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label83
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label83:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Object:
	# It is self.
	move	$a0 $s0


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

App.beta:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# case expr
	# First eval e0
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	# If e0 = void, abort
	bne	$a0 $zero label84
	la	$a0 str_const0
	li	$t1 1
	jal	_case_abort2
label84:
	# T1 = type(acc)
	lw	$t1 0($a0)
	# tag = 12 : goto case 0
	li	$t2 12
	beq	$t1 $t2 label85

	# tag = 10 : goto case 1
	li	$t2 10
	beq	$t1 $t2 label86

	# ----------------
	# tag = 11 : goto case 1
	li	$t2 11
	beq	$t1 $t2 label86

	# tag = 12 : goto case 1
	li	$t2 12
	beq	$t1 $t2 label86

	# tag = 13 : goto case 1
	li	$t2 13
	beq	$t1 $t2 label86

	# ----------------
	# No match
	jal	_case_abort
	b	label87
# eval expr 0
label85:
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label88
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label88:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto apply
	jalr		$t1

	addiu	$sp $sp 4
	# Jumpto finish
	b	label87
# eval expr 1
label86:
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label89
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label89:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto beta
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	la	$a0 App_protObj
	jal	Object.copy
	jal	App_init
	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label90
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label90:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto init
	jalr		$t1

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4

	addiu	$sp $sp 4
	# Jumpto finish
	b	label87
#finish:
label87:


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

App.substitute:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label91
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label91:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto substitute
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label92
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label92:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto substitute
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	la	$a0 App_protObj
	jal	Object.copy
	jal	App_init
	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label93
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label93:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto init
	jalr		$t1

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

App.gen_code:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const27
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label94
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label94:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 12($s0)
	addiu	$a1 $s0 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label95
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label95:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto gen_code
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const28
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label96
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label96:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const29
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label97
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label97:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is an attribute.
	lw	$a0 16($s0)
	addiu	$a1 $s0 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label98
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label98:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto gen_code
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const30
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label99
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label99:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const31
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label100
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label100:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const32
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label101
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label101:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const33
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label102
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label102:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const34
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label103
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label103:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Term.var:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Let expr
	# First eval init
	la	$a0 Variable_protObj
	jal	Object.copy
	jal	Variable_init
	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label104
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label104:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto init
	jalr		$t1

	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 4

	# return
	jr	$ra	

Term.lam:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Let expr
	# First eval init
	la	$a0 Lambda_protObj
	jal	Object.copy
	jal	Lambda_init
	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label105
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label105:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto init
	jalr		$t1

	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Term.app:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Let expr
	# First eval init
	la	$a0 App_protObj
	jal	Object.copy
	jal	App_init
	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# Object:
	# It is a param.
	lw	$a0 16($fp)
	addiu	$a1 $fp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label106
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label106:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto init
	jalr		$t1

	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 8

	# return
	jr	$ra	

Term.i:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	la	$a0 str_const35
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label107
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label107:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto var
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a let variable.
	lw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label108
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label108:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto lam
	jalr		$t1

	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Term.k:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	la	$a0 str_const35
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label109
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label109:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto var
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	la	$a0 str_const36
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label110
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label110:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto var
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a let variable.
	lw	$a0 16($sp)
	addiu	$a1 $sp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label111
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label111:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto lam
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label112
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label112:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto lam
	jalr		$t1

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Term.s:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	la	$a0 str_const35
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label113
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label113:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto var
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	la	$a0 str_const36
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label114
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label114:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto var
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	la	$a0 str_const37
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label115
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label115:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto var
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 24($sp)
	addiu	$a1 $sp 24
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a let variable.
	lw	$a0 20($sp)
	addiu	$a1 $sp 20
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label116
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label116:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 24($sp)
	addiu	$a1 $sp 24
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a let variable.
	lw	$a0 24($sp)
	addiu	$a1 $sp 24
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label117
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label117:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label118
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label118:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label119
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label119:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto lam
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label120
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label120:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto lam
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label121
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label121:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto lam
	jalr		$t1

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Main.beta_reduce:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const38
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label122
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label122:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label123
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label123:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Let expr
	# First eval init
	la	$a0 bool_const0
	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	move	$a0 $zero
	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# While loop
	# start:
label124:
	# ACC = pred
	# the 'not' operator
	# First eval the bool
	# Object:
	# It is a let variable.
	lw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign

	# Extract the int inside the bool
	lw	$t1 12($a0)
	# Pretend ACC = false, then we need to construct true
	la	$a0 bool_const1
	# If ACC = false, jumpto finish
	beq	$t1 $zero label126
	# Load false
	la	$a0 bool_const0
	# finish:
label126:
	# extract int inside bool
	lw	$t1 12($a0)

	# if pred == false jumpto finish
	beq	$t1 $zero label125

	# Assign. First eval the expr.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label127
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label127:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 32($t1)

	# jumpto beta
	jalr		$t1

	# Now find the lvalue.
	# It is a let variable.
	sw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign
	# If statement. First eval condition.
	# equal
	# First eval e1 and push.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Then eval e2.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign


	# Let's pop e1 to t1, move e2 to t2
	addiu	$sp $sp 4
	lw	$t1 0($sp)
	move	$t2 $a0

	# Pretend that t1 = t2
	la	$a0 bool_const1
	# Compare the two pointers.
	beq	$t1 $t2 label128
	la	$a0 bool_const0
label128:
	# extract the bool content from acc to t1
	lw	$t1 12($a0)

	# if t1 == 0 goto false
	beq	$t1 $zero label129

	# Assign. First eval the expr.
	la	$a0 bool_const1
	# Now find the lvalue.
	# It is a let variable.
	sw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign
	# jumpt finish
	b	label130

# False:
label129:
	# Assign. First eval the expr.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	# Now find the lvalue.
	# It is a param.
	sw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign
	# Dispatch. First eval and save the params.
	la	$a0 str_const39
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label131
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label131:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label132
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label132:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

# Finish:
label130:
	# Jumpto start
	b	label124
	# Finish:
label125:
	# ACC = void
	move	$a0 $zero
	# Dispatch. First eval and save the params.
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label133
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label133:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 4

	# return
	jr	$ra	

Main.eval_class:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const40
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label134
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label134:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const41
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label135
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label135:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const23
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label136
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label136:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Main.closure_class:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	la	$a0 str_const42
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label137
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label137:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const43
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label138
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label138:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const44
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label139
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label139:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const45
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label140
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label140:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const46
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label141
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label141:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const47
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label142
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label142:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const48
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label143
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label143:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const23
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label144
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label144:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	

Main.gen_code:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	la	$a0 LambdaListRef_protObj
	jal	Object.copy
	jal	LambdaListRef_init
	# if obj = void: abort
	bne	$a0 $zero label145
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label145:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto reset
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	la	$a0 str_const49
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label146
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label146:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label147
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label147:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const50
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label148
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label148:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const51
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label149
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label149:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label150
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label150:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 56($t1)

	# jumpto eval_class
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label151
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label151:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 60($t1)

	# jumpto closure_class
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const52
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label152
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label152:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const53
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label153
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label153:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 VarList_protObj
	jal	Object.copy
	jal	VarList_init
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a let variable.
	lw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a param.
	lw	$a0 12($fp)
	addiu	$a1 $fp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label154
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label154:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto gen_code
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const54
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label155
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label155:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# While loop
	# start:
label156:
	# ACC = pred
	# the 'not' operator
	# First eval the bool
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label158
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label158:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto isNil
	jalr		$t1

	# Extract the int inside the bool
	lw	$t1 12($a0)
	# Pretend ACC = false, then we need to construct true
	la	$a0 bool_const1
	# If ACC = false, jumpto finish
	beq	$t1 $zero label159
	# Load false
	la	$a0 bool_const0
	# finish:
label159:
	# extract int inside bool
	lw	$t1 12($a0)

	# if pred == false jumpto finish
	beq	$t1 $zero label157

	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label160
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label160:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 16($t1)

	# jumpto headE
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 8($sp)
	addiu	$a1 $sp 8
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label161
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label161:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 20($t1)

	# jumpto headC
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Let expr
	# First eval init
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 12($sp)
	addiu	$a1 $sp 12
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label162
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label162:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 24($t1)

	# jumpto headN
	jalr		$t1

	# push
	sw	$a0 0($sp)
	addiu	$sp $sp -4

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 16($sp)
	addiu	$a1 $sp 16
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label163
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label163:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto removeHead
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Object:
	# It is a let variable.
	lw	$a0 4($sp)
	addiu	$a1 $sp 4
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a let variable.
	lw	$a0 16($sp)
	addiu	$a1 $sp 16
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Object:
	# It is a let variable.
	lw	$a0 24($sp)
	addiu	$a1 $sp 24
	jal	_GenGC_Assign

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is a let variable.
	lw	$a0 20($sp)
	addiu	$a1 $sp 20
	jal	_GenGC_Assign

	# if obj = void: abort
	bne	$a0 $zero label164
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label164:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 52($t1)

	# jumpto gen_closure_code
	jalr		$t1

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4

	# pop
	addiu	$sp $sp 4

	# Jumpto start
	b	label156
	# Finish:
label157:
	# ACC = void
	move	$a0 $zero
	# Dispatch. First eval and save the params.
	la	$a0 str_const50
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label165
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label165:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# pop
	addiu	$sp $sp 4


	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 4

	# return
	jr	$ra	

Main.main:
	# push fp, s0, ra
	addiu	$sp $sp -12
	sw	$fp 12($sp)
	sw	$s0 8($sp)
	sw	$ra 4($sp)

	# fp now points to the return addr in stack
	addiu	$fp $sp 4

	# SELF = a0
	move	$s0 $a0

	# evaluating expression and put it to ACC
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label166
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label166:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	# if obj = void: abort
	bne	$a0 $zero label167
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label167:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label168
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label168:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label169
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label169:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto k
	jalr		$t1

	# if obj = void: abort
	bne	$a0 $zero label170
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label170:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label171
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label171:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label172
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label172:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto s
	jalr		$t1

	# if obj = void: abort
	bne	$a0 $zero label173
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label173:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 28($t1)

	# jumpto print_self
	jalr		$t1

	# Dispatch. First eval and save the params.
	la	$a0 str_const1
	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label174
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label174:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 12($t1)

	# jumpto out_string
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label175
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label175:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto s
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label176
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label176:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto k
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label177
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label177:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label178
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label178:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label179
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label179:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label180
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label180:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label181
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label181:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label182
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label182:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 52($t1)

	# jumpto beta_reduce
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label183
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label183:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto k
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label184
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label184:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label185
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label185:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label186
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label186:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label187
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label187:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label188
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label188:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 52($t1)

	# jumpto beta_reduce
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label189
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label189:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label190
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label190:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label191
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label191:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label192
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label192:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 64($t1)

	# jumpto gen_code
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label193
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label193:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto s
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label194
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label194:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto k
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label195
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label195:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label196
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label196:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label197
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label197:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label198
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label198:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label199
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label199:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label200
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label200:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 64($t1)

	# jumpto gen_code
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label201
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label201:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label202
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label202:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto k
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label203
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label203:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label204
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label204:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto s
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label205
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label205:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label206
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label206:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto s
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label207
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label207:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label208
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label208:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto k
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label209
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label209:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label210
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label210:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto s
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label211
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label211:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label212
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label212:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label213
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label213:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label214
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label214:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto k
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label215
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label215:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label216
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label216:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label217
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label217:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label218
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label218:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 64($t1)

	# jumpto gen_code
	jalr		$t1

	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label219
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label219:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 40($t1)

	# jumpto i
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label220
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label220:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto k
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label221
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label221:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto s
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label222
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label222:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label223
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label223:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label224
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label224:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 44($t1)

	# jumpto k
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label225
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label225:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto s
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# Dispatch. First eval and save the params.
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label226
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label226:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 48($t1)

	# jumpto s
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label227
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label227:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label228
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label228:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label229
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label229:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 36($t1)

	# jumpto app
	jalr		$t1

	sw	$a0 0($sp)
	addiu	$sp $sp -4
	# eval the obj in dispatch.
	# Object:
	# It is self.
	move	$a0 $s0

	# if obj = void: abort
	bne	$a0 $zero label230
	la	$a0 str_const0
	li	$t1 1
	jal	_dispatch_abort
label230:
	# Now we locate the method in the dispatch table.
	# t1 = self.dispTab
	lw	$t1 8($a0)

	# t1 = dispTab[offset]
	lw	$t1 64($t1)

	# jumpto gen_code
	jalr		$t1

	la	$a0 int_const1

	# pop fp, s0, ra
	lw	$fp 12($sp)
	lw	$s0 8($sp)
	lw	$ra 4($sp)
	addiu	$sp $sp 12

	# Pop arguments
	addiu	$sp $sp 0

	# return
	jr	$ra	


# end of generated code
